{"ast":null,"code":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { isClient } from '../helpers/is-client.js';\nimport { useWatchLocalStorageValue } from './use-watch-localstorage-value.js';\nimport { getPrefix, getVersion, getMode } from '../store/index.js';\nconst DEFAULT_MODE = \"auto\";\nconst LS_THEME_MODE = \"flowbite-theme-mode\";\nconst SYNC_THEME_MODE = \"flowbite-theme-mode-sync\";\nfunction useThemeMode() {\n  const [mode, setMode] = useState(getInitialMode(getMode()));\n  useWatchLocalStorageValue({\n    key: LS_THEME_MODE,\n    onChange(newMode) {\n      setMode(validateMode(newMode ?? DEFAULT_MODE));\n    }\n  });\n  useSyncMode(mode2 => setMode(mode2));\n  function handleSetMode(mode2) {\n    setMode(mode2);\n    setModeInLS(mode2);\n    setModeInDOM(mode2);\n    document.dispatchEvent(new CustomEvent(SYNC_THEME_MODE, {\n      detail: mode2\n    }));\n  }\n  function toggleMode() {\n    let newMode = mode;\n    if (newMode === \"auto\") {\n      newMode = computeModeValue(newMode);\n    }\n    newMode = newMode === \"dark\" ? \"light\" : \"dark\";\n    handleSetMode(newMode);\n  }\n  function clearMode() {\n    const newMode = mode ?? DEFAULT_MODE;\n    handleSetMode(newMode);\n  }\n  return {\n    mode,\n    computedMode: computeModeValue(mode),\n    setMode: handleSetMode,\n    toggleMode,\n    clearMode\n  };\n}\nfunction useSyncMode(onChange) {\n  useEffect(() => {\n    function handleSync(e) {\n      const mode = e.detail;\n      onChange(mode);\n    }\n    document.addEventListener(SYNC_THEME_MODE, handleSync);\n    return () => document.removeEventListener(SYNC_THEME_MODE, handleSync);\n  }, []);\n}\nfunction setModeInLS(mode) {\n  localStorage.setItem(LS_THEME_MODE, mode);\n}\nfunction setModeInDOM(mode) {\n  const computedMode = computeModeValue(mode);\n  const prefix = getPrefix() ?? \"\";\n  const version = getVersion();\n  const className = version === 3 ? `${prefix}dark` : \"dark\";\n  if (computedMode === \"dark\") {\n    document.documentElement.classList.add(className);\n  } else {\n    document.documentElement.classList.remove(className);\n  }\n}\nfunction getInitialMode(defaultMode) {\n  if (!isClient()) {\n    return DEFAULT_MODE;\n  }\n  const storageMode = localStorage.getItem(LS_THEME_MODE);\n  return validateMode(storageMode ?? defaultMode ?? DEFAULT_MODE);\n}\nfunction computeModeValue(mode) {\n  if (!isClient()) {\n    return DEFAULT_MODE;\n  }\n  return mode === \"auto\" ? prefersColorScheme() : mode;\n}\nfunction prefersColorScheme() {\n  return window.matchMedia?.(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n}\nfunction validateMode(mode) {\n  if ([\"light\", \"dark\", \"auto\"].includes(mode)) {\n    return mode;\n  }\n  return DEFAULT_MODE;\n}\nexport { useThemeMode };","map":{"version":3,"names":["DEFAULT_MODE","LS_THEME_MODE","SYNC_THEME_MODE","useThemeMode","mode","setMode","useState","getInitialMode","getMode","useWatchLocalStorageValue","key","onChange","newMode","validateMode","useSyncMode","mode2","handleSetMode","setModeInLS","setModeInDOM","document","dispatchEvent","CustomEvent","detail","toggleMode","computeModeValue","clearMode","computedMode","useEffect","handleSync","e","addEventListener","removeEventListener","localStorage","setItem","prefix","getPrefix","version","getVersion","className","documentElement","classList","add","remove","defaultMode","isClient","storageMode","getItem","prefersColorScheme","window","matchMedia","matches","includes"],"sources":["/Users/vincentpower/DEV/GO_AUTOINS/insurance-quote-app/settings-frontend/node_modules/flowbite-react/src/hooks/use-theme-mode.ts"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { isClient } from \"../helpers/is-client\";\nimport { useWatchLocalStorageValue } from \"../hooks/use-watch-localstorage-value\";\nimport { getMode, getPrefix, getVersion } from \"../store\";\n\nconst DEFAULT_MODE: ThemeMode = \"auto\";\nconst LS_THEME_MODE = \"flowbite-theme-mode\";\nconst SYNC_THEME_MODE = \"flowbite-theme-mode-sync\";\n\nexport type ThemeMode = \"light\" | \"dark\" | \"auto\";\n\nexport function useThemeMode() {\n  const [mode, setMode] = useState<ThemeMode>(getInitialMode(getMode()));\n\n  /**\n   * Sync all tabs with the latest theme mode value\n   */\n  useWatchLocalStorageValue({\n    key: LS_THEME_MODE,\n    onChange(newMode: ThemeMode | null) {\n      setMode(validateMode(newMode ?? DEFAULT_MODE));\n    },\n  });\n\n  /**\n   * Keep the other instances of the hook in sync (bi-directional)\n   */\n  useSyncMode((mode) => setMode(mode));\n\n  /**\n   * Sets `mode` to a given value: `light | dark` | `auto`\n   */\n  function handleSetMode(mode: ThemeMode) {\n    setMode(mode);\n    setModeInLS(mode);\n    setModeInDOM(mode);\n    document.dispatchEvent(new CustomEvent(SYNC_THEME_MODE, { detail: mode }));\n  }\n\n  /**\n   * Toggles between: `light | dark`\n   */\n  function toggleMode() {\n    let newMode = mode;\n\n    if (newMode === \"auto\") {\n      newMode = computeModeValue(newMode);\n    }\n\n    newMode = newMode === \"dark\" ? \"light\" : \"dark\";\n\n    handleSetMode(newMode);\n  }\n\n  /**\n   * Clears the mode\n   */\n  function clearMode() {\n    const newMode = mode ?? DEFAULT_MODE;\n\n    handleSetMode(newMode);\n  }\n\n  return {\n    mode,\n    computedMode: computeModeValue(mode),\n    setMode: handleSetMode,\n    toggleMode,\n    clearMode,\n  };\n}\n\n/**\n * Custom event listener on `SYNC_THEME_MODE`\n */\nfunction useSyncMode(onChange: (mode: ThemeMode) => void) {\n  useEffect(() => {\n    function handleSync(e: Event) {\n      const mode = (e as CustomEvent<ThemeMode>).detail;\n      onChange(mode);\n    }\n\n    document.addEventListener(SYNC_THEME_MODE, handleSync);\n    return () => document.removeEventListener(SYNC_THEME_MODE, handleSync);\n  }, []);\n}\n\n/**\n * Sets the give value in local storage\n */\nfunction setModeInLS(mode: ThemeMode) {\n  localStorage.setItem(LS_THEME_MODE, mode);\n}\n\n/**\n * Add or remove class `dark` on `html` element\n */\nfunction setModeInDOM(mode: ThemeMode) {\n  const computedMode = computeModeValue(mode);\n  const prefix = getPrefix() ?? \"\";\n  const version = getVersion();\n  const className = version === 3 ? `${prefix}dark` : \"dark\";\n\n  if (computedMode === \"dark\") {\n    document.documentElement.classList.add(className);\n  } else {\n    document.documentElement.classList.remove(className);\n  }\n}\n\nfunction getInitialMode(defaultMode?: ThemeMode): ThemeMode {\n  if (!isClient()) {\n    return DEFAULT_MODE;\n  }\n\n  const storageMode = localStorage.getItem(LS_THEME_MODE) as ThemeMode | null;\n\n  return validateMode(storageMode ?? defaultMode ?? DEFAULT_MODE);\n}\n\n/**\n * Parse `auto` mode value to either `light` or `dark`\n * @returns `light` | `dark`\n */\nfunction computeModeValue(mode: ThemeMode): ThemeMode {\n  if (!isClient()) {\n    return DEFAULT_MODE;\n  }\n\n  return mode === \"auto\" ? prefersColorScheme() : mode;\n}\n\n/**\n * Get browser prefered color scheme\n * @returns `light` | `dark`\n */\nfunction prefersColorScheme(): ThemeMode {\n  return window.matchMedia?.(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n}\n\n/**\n * Validate the mode value\n * @param mode - The mode value to validate\n * @returns `light` | `dark` | `auto`\n */\nfunction validateMode(mode: ThemeMode): ThemeMode {\n  if ([\"light\", \"dark\", \"auto\"].includes(mode)) {\n    return mode;\n  }\n  return DEFAULT_MODE;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}