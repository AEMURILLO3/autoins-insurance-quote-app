{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { twMerge } from '../../../helpers/tailwind-merge.js';\nimport { useDatePickerContext } from '../DatepickerContext.js';\nimport { getFormattedDate, isDateEqual, isDateInRange, Views } from '../helpers.js';\nfunction DatepickerViewsMonth() {\n  const {\n    theme: rootTheme,\n    minDate,\n    maxDate,\n    filterDate,\n    selectedDate,\n    viewDate,\n    language,\n    setViewDate,\n    setView\n  } = useDatePickerContext();\n  const theme = rootTheme.views.months;\n  return /* @__PURE__ */jsx(\"div\", {\n    className: theme.items.base,\n    children: [...Array(12)].map((_month, index) => {\n      const newDate = /* @__PURE__ */new Date();\n      newDate.setMonth(index, 1);\n      newDate.setFullYear(viewDate.getFullYear());\n      const month = getFormattedDate(language, newDate, {\n        month: \"short\"\n      });\n      const isSelected = selectedDate && isDateEqual(selectedDate, newDate);\n      const isDisabled = !isDateInRange(newDate, minDate, maxDate) || filterDate && !filterDate(newDate, Views.Months);\n      return /* @__PURE__ */jsx(\"button\", {\n        disabled: isDisabled,\n        type: \"button\",\n        className: twMerge(theme.items.item.base, isSelected && theme.items.item.selected, isDisabled && theme.items.item.disabled),\n        onClick: () => {\n          if (isDisabled) return;\n          setViewDate(newDate);\n          setView(Views.Days);\n        },\n        children: month\n      }, index);\n    })\n  });\n}\nDatepickerViewsMonth.displayName = \"DatepickerViewsMonth\";\nexport { DatepickerViewsMonth };","map":{"version":3,"names":["DatepickerViewsMonth","theme","rootTheme","minDate","maxDate","filterDate","selectedDate","viewDate","language","setViewDate","setView","useDatePickerContext","views","months","jsx","className","items","base","children","Array","map","_month","index","newDate","Date","setMonth","setFullYear","getFullYear","month","getFormattedDate","isSelected","isDateEqual","isDisabled","isDateInRange","Views","Months","disabled","type","twMerge","item","selected","onClick","Days"],"sources":["/Users/vincentpower/DEV/GO_AUTOINS/insurance-quote-app/settings-frontend/node_modules/flowbite-react/src/components/Datepicker/Views/Months.tsx"],"sourcesContent":["\"use client\";\n\nimport { twMerge } from \"../../../helpers/tailwind-merge\";\nimport { useDatePickerContext } from \"../DatepickerContext\";\nimport { getFormattedDate, isDateEqual, isDateInRange, Views } from \"../helpers\";\n\nexport interface DatepickerViewsMonthsTheme {\n  items: {\n    base: string;\n    item: {\n      base: string;\n      selected: string;\n      disabled: string;\n    };\n  };\n}\n\nexport function DatepickerViewsMonth() {\n  const {\n    theme: rootTheme,\n    minDate,\n    maxDate,\n    filterDate,\n    selectedDate,\n    viewDate,\n    language,\n    setViewDate,\n    setView,\n  } = useDatePickerContext();\n\n  const theme = rootTheme.views.months;\n\n  return (\n    <div className={theme.items.base}>\n      {[...Array(12)].map((_month, index) => {\n        const newDate = new Date();\n        // setting day to 1 to avoid overflow issues\n        newDate.setMonth(index, 1);\n        newDate.setFullYear(viewDate.getFullYear());\n        const month = getFormattedDate(language, newDate, { month: \"short\" });\n\n        const isSelected = selectedDate && isDateEqual(selectedDate, newDate);\n        const isDisabled =\n          !isDateInRange(newDate, minDate, maxDate) || (filterDate && !filterDate(newDate, Views.Months));\n\n        return (\n          <button\n            disabled={isDisabled}\n            key={index}\n            type=\"button\"\n            className={twMerge(\n              theme.items.item.base,\n              isSelected && theme.items.item.selected,\n              isDisabled && theme.items.item.disabled,\n            )}\n            onClick={() => {\n              if (isDisabled) return;\n\n              setViewDate(newDate);\n              setView(Views.Days);\n            }}\n          >\n            {month}\n          </button>\n        );\n      })}\n    </div>\n  );\n}\n\nDatepickerViewsMonth.displayName = \"DatepickerViewsMonth\";\n"],"mappings":";;;;;;AAOA,SAAQA,qBAAA;EACR,MAAI;IACAC,KAAA,EAAOC,SAAA;IACPC,OAAO;IACPC,OAAA;IACAC,UAAA;IACAC,YAAQ;IACRC,QAAQ;IACRC,QAAA;IACAC,WAAA;IACDC;EACD,IAAAC,oBAAwB;EACxB,MAAAV,KAAA,GAAAC,SAAuB,CAAAU,KAAI,CAAAC,MAAS;EACtC,OAAI,eAAaC,GAAA,QAAmB;IAAAC,SAAU,EAAAd,KAAA,CAAAe,KAAA,CAAAC,IAAA;IAAAC,QAAA,MAAAC,KAAA,MAAAC,GAAA,EAAAC,MAAA,EAAAC,KAAA;MAC1C,MAAAC,OAAQ,GAAQ,eAAU,IAAAC,IAAA;MAC1BD,OAAO,CAACE,QAAA,CAAAH,KAAY;MACpBC,OAAM,CAAAG,WAAQ,CAAAnB,QAAA,CAAAoB,WAAyB,CAAE;MACzC,MAAMC,KAAA,GAAAC,gBAAa,CAAYrB,QAAI,EAAAe,OAAY;QAAAK,KAAA,EAAY;MAAE,CAAO,CAAC;MACrE,MAAME,UAAU,GAAGxB,YAAC,IAAcyB,WAAS,CAAAzB,YAAgB,EAACiB,OAAI;MAChE,MAAAS,UAAA,IAAAC,aAA0B,CAAAV,OAAA,EAAApB,OAAA,EAAAC,OAAA,KAAAC,UAAA,KAAAA,UAAA,CAAAkB,OAAA,EAAAW,KAAA,CAAAC,MAAA;MAC9B,OAAM,eAAQrB,GAAA,CACR,UACN;QACQsB,QAAM,EAAAJ,UAAQ;QACdK,IAAA,UAAW;QACnBtB,SAAgB,EAAAuB,OAAU,CAChBrC,KAAA,CAAAe,KAAU,CAAAuB,IAAI,CAAAtB,IAAM,EACpBa,UAAU,IAAI7B,KAAK,CAACe,KAAK,CAACuB,IAAI,CAACC,QAAA,EAChCR,UAAA,IAAA/B,KAAA,CAAAe,KAAA,CAAAuB,IAAA,CAAAH,QACD;QACRK,OAAc,EAAAA,CAAA;UACJ,IAAAT,UAAY;UACZvB,WAAQ,CAAAc,OAAW;UACpBb,OAAA,CAAAwB,KAAA,CAAAQ,IAAA;QACD;QACDxB,QAAA,EAAAU;MACD,GACDN,KACD;IACJ;EAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}